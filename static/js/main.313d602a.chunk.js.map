{"version":3,"sources":["Game.js","App.js","serviceWorker.js","index.js"],"names":["CELL_SIZE","WIDTH","HEIGHT","Cell","_this$props","this","props","x","y","react_default","a","createElement","className","style","left","concat","top","width","height","React","Component","Game","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","cells","generation","isRunning","interval","handleClick","event","elementOffset","getElementOffset","offsetX","clientX","offsetY","clientY","Math","floor","cols","rows","board","setState","makeCells","runGame","length","randomGame","runIteration","stopGame","timeoutHandler","window","clearTimeout","handleIntervalChange","target","value","clearGame","makeEmptyBoard","handleRandom","push","rect","boardRef","getBoundingClientRect","doc","document","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","_this2","newBoard","newCells","neighbors","calculateNeighbors","newGeneration","setTimeout","JSON","stringify","dirs","i","dir","y1","x1","random","_this3","_this$state","Button_default","variant","onClick","block","backgroundSize","ref","n","map","cell","Game_Cell","key","App","src_Game_0","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.313d602a.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport './Game.css';\r\n\r\nconst CELL_SIZE = 10;\r\nconst WIDTH = 700;\r\nconst HEIGHT = 500;\r\n\r\n/* eslint-disable no-unused-vars */\r\n\r\nclass Cell extends React.Component {\r\n\trender() {\r\n\t\tconst { x,y } = this.props;\r\n\r\n\t\treturn(\r\n\t\t\t<div className = \"cell\" style = {{ \r\n\t\t\t\tleft: `${CELL_SIZE * x + 1}px`,\r\n\t\t\t\ttop: `${CELL_SIZE * y +1}px`,\r\n\t\t\t\twidth: `${CELL_SIZE -1}px`,\r\n\t\t\t\theight: `${CELL_SIZE -1}px` }} />\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass Game extends React.Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.rows = HEIGHT / CELL_SIZE;\r\n\t\tthis.cols = WIDTH / CELL_SIZE;\r\n\t\tthis.board = this.makeEmptyBoard();\r\n\t}\r\n\r\n\tstate = {\r\n\t\tcells: [],\r\n\t\tgeneration: 0,\r\n        isRunning: false,\r\n        interval: 300\r\n\t}\r\n\r\n\tmakeEmptyBoard() {\r\n\r\n\t\tlet board = [];\r\n\t\tfor (let y = 0 ; y < this.rows; y++) {\r\n\t\t\tboard[y] = [];\r\n\t\t\tfor (let x = 0; x < this.cols; x++) {\r\n\t\t\t\tboard[y][x] = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn board;\r\n\t}\r\n\r\n\tmakeCells() {\r\n\t\tlet cells = [];\r\n\t\tfor (let y = 0 ; y < this.rows; y++) {\r\n\t\t\tfor (let x = 0; x < this.cols; x++) {\r\n\t\t\t\tif(this.board[y][x]) {\r\n\t\t\t\t\tcells.push({ x, y});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn cells;\r\n\t}\r\n\r\n\tgetElementOffset(){\r\n\t\tconst rect = this.boardRef.getBoundingClientRect();\r\n\t\tconst doc = document.documentElement;\r\n\r\n\t\treturn {\r\n\t\t\tx: (rect.left + window.pageXOffset) - doc.clientLeft,\r\n\t\t\ty: (rect.top + window.pageYOffset) - doc.clientTop\r\n\t\t};\r\n\t}\r\n\r\n\thandleClick = (event) => {\r\n\t\tconst elementOffset = this.getElementOffset();\r\n\t\tconst offsetX = event.clientX - elementOffset.x;\r\n\t\tconst offsetY = event.clientY - elementOffset.y;\r\n\r\n\t\tconst x = Math.floor(offsetX / CELL_SIZE);\r\n\t\tconst y = Math.floor(offsetY / CELL_SIZE);\r\n\r\n\t\tif (x >= 0 && x <= this.cols && y >= 0 && y <= this.rows) {\r\n\t\t\tthis.board[y][x] = !this.board[y][x];\r\n\t\t}\r\n\r\n\t\tthis.setState({\r\n\t\t\tcells: this.makeCells()\r\n\t\t});\r\n\t}\r\n\r\n\trunGame = () => {\r\n\t\tif(this.makeCells().length === 0){\r\n\t\t\tthis.randomGame();\r\n\t\t}\r\n\t\tthis.setState({ isRunning: true });\r\n\t\tthis.runIteration();\r\n\t}\r\n\r\n\tstopGame = () => {\r\n\t\tthis.setState({ isRunning: false });\r\n\t\tif(this.timeoutHandler) {\r\n\t\t\twindow.clearTimeout(this.timeoutHandler);\r\n\t\t\tthis.timeoutHandler = null;\r\n\t\t}\r\n\t}\r\n\r\n\trunIteration() {\r\n\t\t\r\n\t\tlet newBoard = this.makeEmptyBoard();\r\n\t\tlet newCells  = this.state.cells;\r\n\r\n\t\tfor (let y = 0; y < this.rows; y++){\r\n\t\t\tfor(let x =0 ; x < this.cols; x++) {\r\n\t\t\t\tlet neighbors = this.calculateNeighbors(this.board , x, y);\r\n\t\t\t\tif (this.board[y][x]) {\r\n\t\t\t\t\tif (neighbors === 2 || neighbors === 3){\r\n\t\t\t\t\t\tnewBoard[y][x] = true;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnewBoard[y][x] = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (!this.board[y][x] && neighbors === 3) {\r\n\t\t\t\t\t\tnewBoard[y][x] = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet newGeneration = this.state.generation + 1;\r\n\t\tthis.board = newBoard;\r\n\t\tthis.setState({ cells: this.makeCells() , generation: newGeneration });\r\n\t\t\r\n\t\tthis.timeoutHandler = window.setTimeout( () => {\r\n\r\n\t\t\tthis.runIteration();\r\n\t\t\tif(JSON.stringify(newCells) === JSON.stringify(this.state.cells)){\r\n\t\t\t\tthis.stopGame();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}, this.state.interval);\r\n\t}\r\n\r\n\tcalculateNeighbors(board, x, y) {\r\n\t\tlet neighbors = 0;\r\n\r\n\t\tconst dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0,-1]];\r\n\t\tfor(let i = 0; i < dirs.length; i++) {\r\n\t\t\tconst dir = dirs[i];\r\n\t\t\tlet y1 = y + dir[0];\r\n\t\t\tlet x1 = x + dir[1];\r\n\r\n\t\t\tif ( x1 >= 0 && x1 < this.cols && y1 >= 0 && y1 < this.rows && board[y1][x1]) {\r\n\t\t\t\tneighbors ++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn neighbors;\r\n\t}\r\n\r\n\thandleIntervalChange = (event) => {\r\n\t\tthis.setState({ interval: event.target.value });\r\n\t}\r\n\r\n\tclearGame = () => {\r\n\t\tthis.stopGame();\r\n        this.board = this.makeEmptyBoard();\r\n        this.setState({ cells: this.makeCells() , generation: 0 });\r\n    }\r\n\r\n    handleRandom = () => {\r\n        this.randomGame();\r\n        this.runGame();\r\n    }\r\n\r\n    randomGame() {\r\n    \tfor (let y = 0; y < this.rows; y++) {\r\n            for (let x = 0; x < this.cols; x++) {\r\n                this.board[y][x] = (Math.random() >= 0.5);\r\n            }\r\n        }\r\n\r\n        this.setState({ cells: this.makeCells() });\r\n    }\r\n\r\n\trender() {\r\n\t\tconst { cells, interval, isRunning, generation } = this.state;\r\n\r\n\t\treturn (\r\n\r\n\t\t\t<div className = \"boardalign\">\r\n\t\t\t\t<div className = \"controls\">\r\n\t\t\t\t\t<div className = \"lCell\">\r\n\t\t\t\t\t\t<h5>Generation </h5>\r\n                    \t<div className = \"count\"> {this.state.generation} </div>\r\n                    \t<h5>Live cells </h5>\r\n                    \t<div className = \"count\"> {this.makeCells().length} </div>\r\n                    </div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t{isRunning ? <Button variant=\"danger\" className = \"button\" onClick = {this.stopGame} block>Stop</Button> :\r\n\t\t\t\t\t\t<Button variant=\"dark\" className = \"button\" onClick = {this.runGame} block>Run</Button> }\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<Button variant=\"dark\" className=\"button\" onClick={this.handleRandom} block>Random</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n                    \t<Button variant=\"dark\" className=\"button\" onClick={this.clearGame} block>Clear</Button>\r\n                    </div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className = \"board\" style = { { width: WIDTH, height: HEIGHT, \r\n\t\t\t\t\tbackgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px` }} \r\n\t\t\t\t onClick = {this.handleClick} ref = { (n) => { this.boardRef = n; }} >\r\n\t\t\t\t { cells.map (cell => ( \r\n\t\t\t\t \t\t< Cell x = { cell.x } y = { cell.y } key = { `${cell.x}, ${cell.y}`} /> \r\n\t\t\t\t ))}\r\n\t\t\t\t \r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Game;","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Game from './Game';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className = \"App\" >\n        <h1 className = \"title\">{\"Conway's Game of Life\"} </h1>\n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}